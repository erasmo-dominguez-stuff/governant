name: Validate Environment Compliance

on:
  # Runs on pushes to development branches
  push:
    branches: [develop, feature/*, bugfix/*]
  # Runs on pull requests to develop branch
  pull_request:
    branches: [develop]
  # Allows manual execution
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate (development, staging, production)'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  validate:
    name: Validate ${{ github.event.inputs.environment || 'development' }} Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required to get commit history
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate environment compliance
      id: validate
      run: |
        # Get environment from workflow input or default to 'development'
        ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
        echo "Validating environment: $ENVIRONMENT"
        
        # Run environment validator
        python scripts/validate_environment.py "$ENVIRONMENT"
        
        # Save result for subsequent steps
        RESULT=$?
        if [ $RESULT -eq 0 ]; then
          echo "is_compliant=true" >> $GITHUB_OUTPUT
          echo "✅ Environment $ENVIRONMENT is compliant with all policies"
        else
          echo "is_compliant=false" >> $GITHUB_OUTPUT
          echo "❌ Environment $ENVIRONMENT does not meet all required policies"
          exit 1
        fi
    
    - name: Comment on PR
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('## Environment Validation')
          );
          
          const message = `## Environment Validation
          
          ❌ **Environment validation failed**
          
          Please check the execution logs for details on which policies were not met.
          
          [View execution details](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: message
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }
