name: OPA Policy Evaluation. Wasm Testing, Compiling and Using the policy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  evaluate-policy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11" ]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up uv (official)
        uses: astral-sh/setup-uv@v3
        with:
          version: latest

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # ❌ remove: cache: 'uv' (unsupported)

      - name: Create uv virtualenv
        run: |
          # Create a uv-managed virtual environment so `uv pip` works
          uv venv


  # (Optional) uv cache: wheels / build artifacts
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock', 'requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Ensure src is importable
        run: |
          mkdir -p src
          [ -f src/__init__.py ] || touch src/__init__.py

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Install project + opa-wasm
        run: |
          if [ -f pyproject.toml ]; then
            python -m pip install -e .
          fi
          python -m pip install "opa-wasm[cranelift]"

      - name: Check package installed
        run: |
          python -m pip show governant || (python -m pip list && false)

      - name: Set up OPA (official)
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Compile policy to .compile/
        run: ./scripts/compile_github_env_protect_policy.sh

  # Python (opa-wasm) using the .tar.gz bundle via your CLI
      - name: Python CLI — allow (bundle)
        run: |
          python -m governant.cli --artifact .compile/github_env_protect.tar.gz --package github.deploy allow \
            -i test-inputs/production-valid.json

      - name: Python CLI — violations (bundle)
        run: |
          python -m governant.cli --artifact .compile/github_env_protect.tar.gz --package github.deploy violations \
            -i test-inputs/production-invalid.json \
            --strict-exit