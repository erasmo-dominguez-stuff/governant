name: Test and Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --no-interaction --no-root
        pip install -e .
        
    - name: Run Python tests
      run: |
        pytest -v --cov=src --cov-report=term-missing
        
    - name: Run type checking
      run: |
        mypy src/
        
    - name: Run linting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
        flake8 src/ tests/
        
    - name: Test specific scenarios
      run: |
        echo "Testing production-valid scenario..."
        ./test-policy.sh production-valid
        
        echo "Testing production-invalid scenario..."
        ./test-policy.sh production-invalid
        
        echo "Testing staging-valid scenario..."
        ./test-policy.sh staging-valid
        
        echo "Testing emergency-production scenario..."
        ./test-policy.sh emergency-production
        
    - name: Compare test results
      run: |
        ./test-advanced.sh compare production-valid production-invalid
        
  validate-policy-structure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate policy structure
      run: |
        # Check if required files exist
        test -f .gate/github-release.rego || exit 1
        test -f .gate/policy.json || exit 1
        test -f test-policy.sh || exit 1
        test -f test-advanced.sh || exit 1
        
        # Check if test inputs exist
        test -d test-inputs || exit 1
        test -f test-inputs/production-valid.json || exit 1
        test -f test-inputs/production-invalid.json || exit 1
        test -f test-inputs/staging-valid.json || exit 1
        test -f test-inputs/emergency-production.json || exit 1
        
        echo "✅ All required files present"
        
    - name: Check file permissions
      run: |
        # Ensure scripts are executable
        test -x test-policy.sh || exit 1
        test -x test-advanced.sh || exit 1
        echo "✅ Scripts are executable"
        
    - name: Validate JSON schema
      run: |
        # Basic JSON validation
        python3 -c "
        import json
        import sys
        
        try:
            with open('.gate/policy.json') as f:
                json.load(f)
            print('✅ policy.json is valid JSON')
        except Exception as e:
            print(f'❌ policy.json is invalid: {e}')
            sys.exit(1)
            
        for test_file in ['test-inputs/production-valid.json', 'test-inputs/production-invalid.json', 'test-inputs/staging-valid.json', 'test-inputs/emergency-production.json']:
            try:
                with open(test_file) as f:
                    json.load(f)
                print(f'✅ {test_file} is valid JSON')
            except Exception as e:
                print(f'❌ {test_file} is invalid: {e}')
                sys.exit(1)
        "
